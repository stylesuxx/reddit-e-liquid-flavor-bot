#!/usr/bin/python

from requests.exceptions import RequestException
import threading
import argparse
import prawcore
import signal
import praw
import time
import sys
import re

from flavor_bot.Listener import Submission, Comment
from flavor_bot.helpers import log, signalHandler
from flavor_bot.Processor import Processor
from flavor_bot.Formatter import Markdown
from flavor_bot.Source import ATF, ELR
from flavor_bot.Pool import Pool
import flavor_bot.settings


signal.signal(signal.SIGINT, signalHandler)

version = '0.0.4'
userAgent = 'E-Juice Flavor Lookup %s (by /u/stylesuxx)' % (version)

elr = ELR()
atf = ATF()
processed = []
sources = [elr, atf]
formatter = Markdown()
pattern = re.compile('\[\[([^\]]*)\]\]', re.MULTILINE)

parser = argparse.ArgumentParser(description=userAgent)
parser.add_argument('siteName', metavar='SITENAME',
                    help='Site name to use from the config')
parser.add_argument('-s', '--sub', dest='subreddit', metavar='SUB',
                    default='test', help='Subreddit to monitor')
parser.add_argument('-t', '--time', dest='timeout', metavar='SEC',
                    default=60, help='Time between failed API calls')
parser.add_argument('-d', '--debug', dest='debug', action='store_true',
                    help='Print debugging output')
parser.add_argument('-w', '--workers', dest='workers', metavar='NR',
                    default=1, help='Nr of workers to spawn')

args = parser.parse_args()
siteName = args.siteName
subreddit = args.subreddit
debug = args.debug
timeout = args.timeout
workers = args.workers

flavor_bot.settings.init(debug)

try:
    reddit = praw.Reddit(user_agent=userAgent, site_name=siteName)
    username = reddit.user.me()

    sub = reddit.subreddit(subreddit)
    submissionStream = sub.stream.submissions
    commentStream = sub.stream.comments

except prawcore.exceptions.RequestException:
    print 'Name resolution failed. Are you offline?'
    sys.exit(1)

except prawcore.exceptions.ResponseException:
    print 'Login failed. Check client_id, client_secret and refresh_token.'
    sys.exit(1)

vendors = atf.getVendorList()
processor = Processor(pattern, formatter, sources, {'vendors': vendors})

for submission in sub.new():
    processed.append(submission.id)
log('Marked old submissions as processed...')

for comment in sub.comments():
    processed.append(comment.id)
log('Marked old comments as processed...')


def itemHandler(item):
    op = item['op']
    text = item['text']
    posted = False

    reply = processor.process(item['text'])
    if(reply):
        while not posted:
            try:
                print reply
                # op.reply(reply)
                posted = True
                log('Replied to: %s' % (op.id))

            except praw.exceptions.APIException as err:
                log('Hit rate limit.')
                log('Sleeping for %i seconds...' % (timeout))
                time.sleep(timeout)

pool = Pool(itemHandler)
pool.spawn(workers)

submissionListener = Submission(submissionStream, pool.addWork)
submissionListener.setProcessed(processed)
submissionListener.setTimeout(timeout)
submissionListener.setAuthor(username)
submissionListener.daemon = True
submissionListener.start()
log('Submission listener attached...')

commentListener = Comment(commentStream, pool.addWork)
commentListener.setProcessed(processed)
commentListener.setTimeout(timeout)
commentListener.setAuthor(username)
commentListener.daemon = True
commentListener.start()
log('Comment listener attached...')

while threading.active_count() > 0:
    time.sleep(0.1)
